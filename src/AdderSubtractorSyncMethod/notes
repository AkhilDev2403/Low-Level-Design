Here we have to return something.
we can't relay on Runnable, because it has a function -> void run()
so if we wanted to return something in multithreading we should use -> Callable interface
Callable<T> has a function T call();

    @Override
    public Void call() throws Exception {
        for (int i = 1; i <= 100; i++) {
            this.v.value += i;
        }
        return null;
    }

        @Override
        public Void call() throws Exception {
            for (int i = 1; i <= 100; i++) {
                this.v.value -= i;
            }
            return null;
        }


        when we do this we may get chances the value of 0;
        but if we iterate through 10000 and do add or sub and multiple threads comes at the same time
        we may never get 0.  Why ?

        synchronization issue - xle threads accessing the same resource (vale) at the same time.

        1. Critical section
        2. Race condition
        3. Pre emptiness


        1. What can we do ?
        solution -> the shared data shouldn't accessed at the same time.

        1. Mutex Lock

        Solution.1 - lock() and unlock()

        we need a shared lock and pass that lock to the adder and subtracer classes
        and implement lock and unlock

              Lock lock = new ReentrantLock();

                  @Override
                  public Void call() throws Exception {
                      for(int i=1; i <= 10000; i++) {
                          lock.lock();
                          this.v.value += i;
                          lock.unlock();
                      }
                      return null;
                  }
              Now we get 0.



               @Override
                  public Void call() throws Exception {
                      lock.lock();
                      for(int i=1; i <= 10000; i++) {
                          System.out.println("Adder" + i);
                          this.v.value += i;
                      }
                      lock.unlock();
                      return null;
                  }

                  here we get first all the adder/subtracter will execute then sub/add will execute one by one


                  Here explicit lock / mutex lock acts as one thread at a time can access the shared area.


                  Solution.2 We have implicit lock as well - synchronized

                  Solution.3   -> Implicit lock - Synchronized

                  we can have Synchronized method and Synchronized block as well

                  1. Synchronized method

                  public class Value {
                      public int value;

                      synchronized void incrementBy(int i){
                          this.value+=i;
                      }

                      synchronized void decrementBy(int i){
                          this.value-=i;
                      }
                  }

                  we simply adding the synchronized method and call the adder and sub with this so every time
                  we definitely get 0.

                  2. synchronized block


